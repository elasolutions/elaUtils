{"name":"Elautils","tagline":"utilities used by elasolutions","body":"elaUtils\r\n========\r\n\r\nelaUtils is a set of Java utilities classes that are used by ela solutions.  The classes that do not fit into other third party libs have been brought into elaUtils.\r\n\r\n## Usage\r\n\r\n**CloseUtil** - Provides a central place for close behavior to reduce copy & pasting.\r\n\r\n```\r\nCloseUtil.close(fileHandle);\r\n```\r\n<br/>\r\n**Copy** - Utility for making object copies without the need for adding cloning to an object.  Copy does a deep copy.<br/>\r\nNote: There is no need for casting.\r\n\r\n```\r\nfinal Car firstCar = new Car(\"Ford\");\r\nfinal Car copyCar = Copy.copy(firstCar);\r\n```\r\n<br/>\r\n\r\n<br/>\r\n**StringDoubleUtil** - Converts Strings to doubles.\r\n```\r\nassertTrue( StringDoubleUtil.isDouble(\"1.0\"));\r\nassertFalse(StringDoubleUtil.isDouble(\"a\"));\r\nassertTrue( StringDoubleUtil.getDouble(null,0)==0);\r\nassertTrue( StringDoubleUtil.getDouble(\"4.4\",0)==4.4);\r\n```\r\n\r\n<br/>\r\n**SimpleCache<I, T>** - An simple alternative to ehcache.\r\n\r\n```\r\nString cacheName = \"simple\";\r\n\r\n// the minimum amount of time in milliseconds that the object should stay in cache\r\nlong expire = 1000; \r\n\r\n// period time in milliseconds between successive expire checks.\r\nlong period = 60000; \r\n\r\nm_store = new SimpleCache<Integer, Car>(\"Demo\", expire, period);\r\n....\r\nfinal Integer key = Integer.valueOf(1);\r\nm_store.put(key, new Car(key, \"my car\"));\r\n\r\nfinal Integer key2 = Integer.valueOf(2);\r\nm_store.put(key2, new Car(key2, \"van\"));\r\n\r\nCar car = m_store.get(key);\r\nSystem.out.println(car.m_name);\r\n\r\nm_store.put(key, new Car(key, \"my car update\"));\r\ncar = m_store.get(key);\r\nSystem.out.println(car.m_name);\r\n\r\ntry { Thread.sleep(10000); } \r\ncatch (final InterruptedException excep) { }\r\n\r\nm_store.put(key, new Car(key, \"my car update again\"));\r\ncar = m_store.get(key);\r\nSystem.out.println(car.m_name);\r\n\r\n// careful, due to timeout data may not be returned\r\ncar = m_store.get(key2);\r\nif( car!=null) {\r\n\tSystem.out.println(car.m_name);\r\n} else {\r\n\tSystem.out.println(\"No car corresponding to \" + key2.toString());\r\n}\r\n```\r\n<br/>\r\n\r\n\r\n**CryptoService** Wraps to encrypt/decrypt functionality.\r\n\r\n```\r\nint iterationCount = 19;\r\n\r\nString passPhrase = \"YourPassPhrase\";\r\n\r\n// 8-byte Salt\r\nbyte[] salt ={ \r\n\t(byte) 0xA9, (byte) 0x9B, (byte) 0xC8, (byte) 0x32, (byte) 0x56,\r\n\t(byte) 0x35, (byte) 0xE3, (byte) 0x03 \r\n};\r\n\r\nCrypto encrypter = CryptoService.newUtils(passPhrase, salt, iterationCount);\r\nfinal String encrypted = encrypter.encrypt(\"Don't tell anybody!\");\r\nSystem.out.println(\"encrypted=\" + encrypted);\r\nSystem.out.println(\"decrypted=\"+encrypter.decrypt(encrypted));\r\n\r\nOutput:\r\nencrypted=wvE4cZuDblPZpKs78bVTZHroAB7ouFGh\r\ndecrypted=Don't tell anybody!\r\n```\t\t\r\n\r\n<br/>\r\n**SyncWriter** - An interface and set of concrete classes that controls the writing from multiple threads.\r\n```\t\t\r\nSyncCompressInMemory writer = new SyncFileWrite(new File(\"path to file\"));\r\nwriter.write(\"some text\");\r\n...\r\nwriter.write(\"some text\");\r\nwriter.close();\r\n```\t\t\r\n\r\n<br/>\r\n**HessianProxy** - Singleton wrapper to the HessianProxyFactory.\r\n\r\n<br/>\r\n**ServletUtil** - Dumps the entire HttpServletRequest structure, session state and cookies to a buffer for display, debugging or logging.\r\n```\r\n// request is a HttpServletRequest object\r\nStringBuffer requestDump = ServletUtil.dumpRequest(request); \r\n```\r\n\r\n<br/>\r\n**WebClient** - A mechanism to detect client software, version and platform from a user-agent string.\r\n```\r\n// is windows?\r\nWebClient.isWindows(request)\r\n\r\nPlatform platform =  WebClient.detect(request).getPlatform();\r\n\r\npublic enum Platform {\r\n    MACOSX,\r\n    WIN95,\r\n    WIN98,\r\n    WINNT,\r\n    WIN2K,\r\n    WINXP,\r\n    WINVISTA,\r\n    WIN7,\r\n    WIN8,\r\n    WIN81,\r\n    LINUX,\r\n    IOS,\r\n    ANDROID,\r\n    JAVA_ME,\r\n    UNKNOWN\r\n}\r\n```\r\n\r\n\r\n<br/>\r\n**StressTest** - Java based stress test service.  Write the stress test in Java rather than using an elaborate GUI tools.\r\n```\r\n// Test: This is the test that will be executed.   \r\nThe action() contains the code to be executed\r\nfinal  StressAction action = new StressAction() {\r\n\t@Override\r\n\tpublic String action(int threadId, int count) {\r\n\t\t//-----------------------------------------------\r\n\t\t// The count corresponds to the number of times this method has been called.\r\n\t\t// count is useful for things like logging or pull records from a list or file.\r\n\r\n\t\t//-----------------------------------------------\r\n\t\t// do something here.\r\n\t\tfinal String statusFlag = \"complete\";\r\n\r\n\t\t// The thread is to simulate activity\r\n\t\ttry {\r\n\t\t\tThread.sleep(10);\r\n\t\t} catch (InterruptedException excep) {\r\n\t\t\texcep.printStackTrace();\r\n\t\t}\r\n\r\n\t\t//-----------------------------------------------\r\n\t\t// return the status or message of the test.\r\n\t\treturn statusFlag;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void cleanup() {\r\n\t\t// do some clean up here, such as closing database connections.\r\n\t}\r\n};\r\n\r\n// Determine how you want the class to be executed.\r\nfinal String testName = \"service call test\";\r\n\r\nfinal int numberOfThreads = 150;\r\n\r\nfinal int numberOfActionsPerThread = 50;\r\n\r\nfinal long delayBetweenActionsInMilliseconds = 50;\r\n\r\nfinal boolean useRandomDelay = false;\r\n\r\nfinal StressTest load = StressTest.newTest();\r\nload.setDisplayDuringExecution(true);\r\nload.run(testName, numberOfThreads, numberOfActionsPerThread,\r\n\tdelayBetweenActionsInMilliseconds, useRandomDelay, action);\r\n\r\n// display results\r\nfor (StressThead result : load.getStressThreads()) {\r\n\tSystem.out.println(result.toString());\r\n\tfor( StressResults details : result.getResults() ) {\r\n\t\tSystem.out.println(\"\\t\" + details.toString());\r\n\t}\r\n}\r\nSystem.out.println(\"Total runtime = \" + load.getTotalRuntime());\r\nSystem.out.println(\"Average thread execution time= \" + load.getAverageThreadTime());\r\n```\r\n\r\n\r\n**FieldTypes** - Reusable type information in the form of a enumeration with methods.\r\n\r\n```\r\nFieldTypes.DOUBLE\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}